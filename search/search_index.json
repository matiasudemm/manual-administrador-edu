{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Manual de Administrador \u2013 Edu 2.0","text":"<p>Este manual est\u00e1 destinado al personal de soporte y administradores encargados de instalar, configurar y mantener el sistema Edu 2.0.</p> <p>Incluye requisitos t\u00e9cnicos, procedimientos de instalaci\u00f3n y pautas de administraci\u00f3n.</p> <p> </p>"},{"location":"acerca/","title":"Acerca de Smartech","text":"<p> Smartech est\u00e1 formado por un equipo de estudiantes del \u00faltimo a\u00f1o de Ingenier\u00eda en Sistemas comprometidos con la innovaci\u00f3n tecnol\u00f3gica aplicada a la educaci\u00f3n. Nuestro objetivo es desarrollar soluciones inteligentes que faciliten el aprendizaje y optimicen las tareas docentes mediante el uso de inteligencia artificial y herramientas digitales. El proyecto Edu 2.0 refleja nuestra visi\u00f3n de una educaci\u00f3n universitaria m\u00e1s interactiva, personalizada y accesible.  </p>"},{"location":"acerca/#nuestro-equipo","title":"Nuestro equipo","text":"<ul> <li> <p>Hern\u00e1n Here\u00f1\u00fa \u2014 Technical Lead Responsable del dise\u00f1o e implementaci\u00f3n t\u00e9cnica del sistema. Coordina los aspectos tecnol\u00f3gicos del proyecto, define la arquitectura y lidera la integraci\u00f3n de los componentes de inteligencia artificial. Su enfoque se centra en la innovaci\u00f3n, la eficiencia y la calidad t\u00e9cnica del producto.</p> </li> <li> <p>Macarena Escuer \u2014 Project Manager Encargada de la planificaci\u00f3n, organizaci\u00f3n y seguimiento del proyecto. Asegura la comunicaci\u00f3n entre las distintas \u00e1reas, gestiona los plazos y coordina los recursos para garantizar el cumplimiento de los objetivos. Posee un enfoque estrat\u00e9gico y orientado a resultados.</p> </li> <li> <p>Mat\u00edas Garc\u00eda \u2014 Desarrollador Participa activamente en el dise\u00f1o y desarrollo de las funcionalidades del sistema. Su aporte t\u00e9cnico se destaca en la implementaci\u00f3n del backend y la integraci\u00f3n de los m\u00f3dulos principales. Aporta soluciones creativas y eficientes para los desaf\u00edos del desarrollo.</p> </li> <li> <p>Jorge Retamozo \u2014 Desarrollador Colabora en la programaci\u00f3n del sistema, participando en la codificaci\u00f3n, pruebas y documentaci\u00f3n. Su perfil proactivo y su inter\u00e9s por el aprendizaje continuo aportan dinamismo y compromiso\u00a0al\u00a0grupo.</p> </li> </ul>"},{"location":"administracion/","title":"Administraci\u00f3n del Sistema","text":"<ul> <li>Monitorear logs del backend para detectar errores.</li> <li>Realizar copias de seguridad peri\u00f3dicas de MySQL y MongoDB.</li> <li>Revisar estad\u00edsticas de uso y optimizar recursos del servidor.</li> </ul>"},{"location":"arquitectura/","title":"Visi\u00f3n general de la arquitectura","text":""},{"location":"arquitectura/#componentes-principales","title":"Componentes principales","text":"<ul> <li>Frontend: React + Vite. Consume API REST del backend.</li> <li>Backend: FastAPI (Python 3.10.x).</li> <li>MySQL 8.x: base relacional.</li> <li>MongoDB 6.x: base documental.</li> <li>Servidor LLM: llama.cpp (GPU).</li> </ul>"},{"location":"arquitectura/#puertos-tipicos","title":"Puertos t\u00edpicos","text":"<ul> <li>Frontend dev: 5173 / Producci\u00f3n: 80/443</li> <li>Backend: 8000 o 80/443 tras proxy</li> <li>MongoDB: 27017/tcp</li> <li>LLM: 8080/tcp</li> </ul>"},{"location":"automatizacion/","title":"Automatizaci\u00f3n con PowerShell (iniciar.ps1)","text":""},{"location":"automatizacion/#objetivo","title":"Objetivo","text":"<p>Orquestar el arranque local, es decir levantar Mongo en Docker (si no est\u00e1 corriendo), el servidor LLM y los procesos de backend/frontend.</p>"},{"location":"automatizacion/#recomendaciones-de-uso","title":"Recomendaciones de uso","text":"<ul> <li>Ubicar <code>iniciar.ps1</code> en la ra\u00edz del proyecto.</li> <li>Abrir PowerShell en esa carpeta y ejecutar:</li> </ul> <pre><code>.\\iniciar.ps1\n</code></pre> <ul> <li>Si se defini\u00f3 un alias <code>iniciar</code>, tambi\u00e9n puede invocarse escribiendo: iniciar</li> </ul>"},{"location":"automatizacion/#consideraciones","title":"Consideraciones","text":"<ul> <li>Asegurar <code>Set-ExecutionPolicy RemoteSigned</code> (scope CurrentUser).</li> <li>El script deber\u00eda validar prerequisitos (Docker, Python, Node), crear/activar venv, ejecutar <code>pip install -r requirements.txt</code>, <code>npm ci</code>, y levantar servicios en el orden correcto.</li> <li>Incluir logs y manejo de errores (si un servicio falla, mostrar mensaje claro y no cerrar la consola autom\u00e1ticamente).</li> </ul>"},{"location":"backups/","title":"Copias de seguridad y restauraci\u00f3n","text":""},{"location":"backups/#backendconfiguracion","title":"Backend/Configuraci\u00f3n:","text":"<ul> <li>Respaldar <code>.env</code>, scripts <code>*.ps1</code>, <code>Dockerfile*</code>, y carpetas <code>contextos/</code>.</li> </ul>"},{"location":"backups/#bases-de-datos","title":"Bases de datos","text":"<ul> <li>MySQL: <code>mysqldump</code> diario y retenci\u00f3n 14\u201330 d\u00edas.</li> <li>MongoDB: backup en fr\u00edo de <code>historial/</code>(o <code>mongodump</code> si se expone).</li> </ul>"},{"location":"backups/#frontend","title":"Frontend:","text":"<ul> <li>Respaldar <code>src/</code> y artefactos de build si aplica.</li> </ul>"},{"location":"backups/#pruebas-de-restauracion","title":"Pruebas de restauraci\u00f3n:","text":"<ul> <li>Validar backups mensuales en entorno de staging.</li> </ul>"},{"location":"base-datos/","title":"Configuraci\u00f3n de Bases de Datos","text":""},{"location":"base-datos/#mysql","title":"MySQL","text":"<ul> <li>Crear base de datos <code>edu</code>.</li> <li>Importar esquema inicial desde scripts SQL proporcionados.</li> <li>Configurar credenciales en el backend.</li> </ul>"},{"location":"base-datos/#mongodb","title":"MongoDB","text":"<ul> <li>Se crea autom\u00e1ticamente al iniciar el sistema.</li> <li>Las credenciales se encuentran en el backend.</li> </ul>"},{"location":"base-datos/#backups","title":"Backups","text":"<pre><code>mysqldump -u edu -p --routines --triggers edu &gt; backup_edu_YYYYMMDD.sql\n</code></pre>"},{"location":"faq/","title":"Soluci\u00f3n de problemas (FAQ)","text":"<ul> <li><code>pip</code> compila paquetes: Instalar Build Tools (Windows) o <code>build-essential</code> (Linux). Verificar Python 3.10.x.</li> <li><code>torch</code> no detecta GPU: Confirmar drivers NVIDIA y CUDA 11.8; probar <code>nvidia-smi</code>. Verificar que la imagen de llama.cpp tenga soporte CUDA.</li> <li><code>npm install</code> falla: Use <code>npm ci</code> para respetar <code>package-lock.json</code>. Verificar Node 18.x.</li> <li>Puerto en uso: Cambiar <code>--port</code> o detener proceso conflictivo.</li> <li>Backend no llega al LLM: Revisar <code>LLM_SERVER_URL</code> y que el contenedor exponga 8080; <code>docker logs llama-server</code>.</li> <li>Mongo sin datos: Revisar mapeo del volumen (ruta absoluta, permisos) y existencia de <code>historial/</code>.</li> </ul>"},{"location":"instalacion-backend/","title":"Instalaci\u00f3n del Backend","text":"<ol> <li>Clonar el repositorio del proyecto.</li> <li>Crear y activar entorno virtual de Python.</li> <li>Instalar dependencias con <code>pip install -r requirements.txt</code>.</li> <li>Configurar variables de entorno (.env) con par\u00e1metros de MySQL, MongoDB y servidor LLM.</li> <li>Ejecutar <code>uvicorn app.main:app --reload</code>.</li> </ol>"},{"location":"instalacion-backend/#produccion","title":"Producci\u00f3n","text":"<ul> <li>Servir con Gunicorn/Uvicorn workers detr\u00e1s de un proxy (IIS/ARR o Nginx) con HTTPS.</li> <li>Registrar logs (rotaci\u00f3n diaria), healthchecks y monitoreo.</li> </ul>"},{"location":"instalacion-frontend/","title":"Instalaci\u00f3n del Frontend","text":"<ol> <li>Ingresar a la carpeta <code>frontend</code>.</li> <li>Ejecutar <code>npm install</code>.</li> <li>Configurar archivo <code>.env</code> con la URL del backend.</li> <li>Ejecutar <code>npm run dev</code>.</li> </ol>"},{"location":"instalacion-frontend/#produccion","title":"Producci\u00f3n","text":"<pre><code>npm run build\n</code></pre> <p>Desplegar <code>dist/</code> detr\u00e1s de un servidor (IIS, Nginx, etc.).</p> <p>Configurar <code>VITE_API_BASE</code> en <code>.env</code> para apuntar al backend.</p>"},{"location":"migracion/","title":"Migraci\u00f3n de servidor","text":"<ol> <li>Copiar repositorio y archivos de configuraci\u00f3n (<code>.env</code>, scripts, etc.).</li> <li>Instalar prerequisitos (Python/Node/Docker/CUDA).</li> <li>Restaurar MySQL desde dump.</li> <li>Copiar carpeta <code>historial/</code> de Mongo al nuevo host y recrear contenedor con <code>-v &lt;nuevo_path&gt;:/data/db</code>.</li> <li>Desplegar LLM y validar conectividad desde backend.</li> <li>Levantar backend/frontend y ejecutar pruebas funcionales.</li> </ol>"},{"location":"mongodb-docker/","title":"MongoDB en Docker","text":""},{"location":"mongodb-docker/#imagen-y-contenedor","title":"Imagen y contenedor","text":"<p>Desde carpeta mongodb/ del repositorio</p> <pre><code>docker build -t tutor_mongo .\n</code></pre>"},{"location":"mongodb-docker/#primera-ejecucion","title":"Primera ejecuci\u00f3n","text":"<p>Mmodo daemon, puerto 27017 y volumen linkeado</p> <pre><code>docker run -d --name tutor_mongo -p 27017:27017 -v ${PWD}/historial:/data/db tutor_mongo\n</code></pre>"},{"location":"mongodb-docker/#reinicios-posteriores","title":"Reinicios posteriores","text":"<pre><code>docker start tutor_mongo\n</code></pre>"},{"location":"mongodb-docker/#carpeta-historial","title":"Carpeta <code>historial/</code>","text":"<p>Contiene los archivos de la base de datos (repositorio f\u00edsico de MongoDB).</p>"},{"location":"mongodb-docker/#migracion","title":"Migraci\u00f3n","text":"<p>Copiar esta carpeta al nuevo servidor y recrear el contenedor apuntando al nuevo path.</p>"},{"location":"mongodb-docker/#backups-en-frio","title":"Backups en fr\u00edo","text":"<p>Detener</p> <pre><code>docker stop tutor_mongo\n</code></pre> <p>Backup</p> <pre><code>Compress-Archive -Path .\\historial -DestinationPath .\\mongo_historial_YYYYMMDD.zip\n</code></pre> <p>Restaurar Descomprimir y ejecutar </p> <pre><code>docker run con -v &lt;path&gt;:/data/db\n</code></pre>"},{"location":"preparaci%C3%B3n-entorno/","title":"Preparaci\u00f3n del entorno (Windows + PowerShell)","text":"<ol> <li>Instalar: Git, Python 3.10.x (agregar a PATH), Node 18.x (v\u00eda nvm o instalador), Docker Desktop, drivers NVIDIA + CUDA 11.8.</li> <li>Clonar repositorio (ruta ejemplo): C:\\Edu20\\</li> <li>Pol\u00edtica de ejecuci\u00f3n de PowerShell para scripts locales (ejecutar como Administrador): Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</li> <li>Verificar Docker: docker version    En Windows con WSL2: confirmar que \u201cUse the WSL 2 based engine\u201d est\u00e9 activo en Docker Desktop.</li> </ol>"},{"location":"requerimientos/","title":"Requerimientos del sistema","text":""},{"location":"requerimientos/#sistema-operativo","title":"Sistema operativo","text":"<ul> <li>Windows 10/11 Pro o Windows Server 2019/2022</li> <li>Alternativa: Ubuntu Server 22.04 LTS</li> </ul>"},{"location":"requerimientos/#hardware-minimo","title":"Hardware m\u00ednimo","text":"<ul> <li>CPU x86_64 con AVX2 (Intel Core i5 10\u00aa gen / Ryzen 5, 6C/12T)</li> <li>RAM 16 GB (32 GB recomendado)</li> <li>GPU NVIDIA 6\u20138 GB VRAM (RTX 3060 o superior)</li> <li>Almacenamiento SSD NVMe (\u2265 256\u2013512 GB)</li> </ul>"},{"location":"requerimientos/#hardware-recomendado","title":"Hardware recomendado","text":"<ul> <li>CPU: Intel Core i7 13650HX (14 n\u00facleos / 20 hilos).</li> <li>Memoria: 32 GB DDR5.</li> <li>GPU: NVIDIA GeForce RTX 4060 Laptop GPU (8 GB VRAM).</li> <li>Almacenamiento: SSD NVMe 1 TB.</li> <li>Virtualizaci\u00f3n habilitada (VT x / Hyper V). Conectividad Wi Fi 6 o Ethernet Gigabit.</li> </ul>"},{"location":"requerimientos/#software","title":"Software","text":"<ul> <li>Python 3.10.x</li> <li>Node.js 18.x LTS</li> <li>Docker Engine y Desktop</li> <li>Git</li> <li>CUDA 11.8 + cuDNN</li> </ul>"},{"location":"seguridad/","title":"Seguridad y Buenas Pr\u00e1cticas","text":"<ul> <li>HTTPS obligatorio en producci\u00f3n (certificados v\u00e1lidos).</li> <li>Variables sensibles s\u00f3lo en <code>.env</code>/secret store. Nunca commitear secretos.</li> <li>Rotaci\u00f3n de claves JWT y contrase\u00f1as de DB.</li> <li>Firewalls: exponer s\u00f3lo puertos necesarios.</li> <li>Limitar or\u00edgenes CORS al dominio oficial.</li> <li>Actualizar peri\u00f3dicamente dependencias y contenedores.</li> <li>Monitoreo y alertas (CPU, RAM, errores 5xx, colas de trabajo, etc.).</li> </ul>"},{"location":"servidor-llm/","title":"Servidor LLM (llama.cpp + GPU)","text":""},{"location":"servidor-llm/#construccion","title":"Construcci\u00f3n","text":"<pre><code>docker build --no-cache -f Dockerfile.dev -t llama-server .\n</code></pre>"},{"location":"servidor-llm/#ejecucion-inicial-puerto-8080-con-gpu","title":"Ejecuci\u00f3n inicial (puerto 8080, con GPU)","text":"<pre><code>docker run --gpus all -p 8080:8080 --name llama-server llama-server\n</code></pre>"},{"location":"servidor-llm/#notas","title":"Notas","text":"<ul> <li>Montar carpeta de modelos GGUF si el contenedor los espera en host (ej.: <code>-v C:\\Modelos:/models</code>).</li> <li>Verificar <code>LLM_SERVER_URL</code> en backend apunte a </li> </ul> <pre><code>http://localhost:8080/completion\n</code></pre> <ul> <li>Consultar logs:</li> </ul> <pre><code>docker logs -f llama-server \n</code></pre>"}]}